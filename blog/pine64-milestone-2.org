#+TITLE:       Pine64 Milestone 2
#+DATE:        2016-08-23 Tue
#+URI:         /blog/%y/%m/%d/pine64-milestone-2
#+KEYWORDS:    Pine64
#+TAGS:        Pine64
#+LANGUAGE:    en
#+OPTIONS:     H:3 num:nil toc:nil \n:nil ::t |:t ^:nil -:nil f:t *:t <:t
#+DESCRIPTION: Pine64 Milestone 2

After few days of playing docker on Pine64, a couple of interesting points can be made. The first one is to run docker inside docker

On the host, it shows

#+BEGIN_SRC bash
debian@pine64:~$ docker version
Client:
 Version:      1.12.0
 API version:  1.24
 Go version:   go1.6.3
 Git commit:   8eab29e
 Built:        Thu Aug 11 09:45:17 2016
 OS/Arch:      linux/arm64

Server:
 Version:      1.12.0
 API version:  1.24
 Go version:   go1.6.3
 Git commit:   8eab29e
 Built:        Thu Aug 11 09:45:17 2016
 OS/Arch:      linux/arm64
debian@pine64:~$
#+END_SRC

Then load the docker as

#+BEGIN_SRC bash
docker run -ti --rm \
-v /usr/bin/docker:/usr/bin/docker \
-v /usr/bin/docker-containerd:/usr/bin/docker-containerd \
-v /usr/bin/docker-containerd-ctr:/usr/bin/docker-containerd-ctr \
-v /usr/bin/docker-containerd-shim:/usr/bin/docker-containerd-shim \
-v /usr/bin/dockerd:/usr/bin/dockerd \
-v /usr/bin/docker-proxy:/usr/bin/docker-proxy \
-v /usr/bin/docker-runc:/usr/bin/docker-runc \
-v /var/run/docker.sock:/var/run/docker.sock \
aarch64/debian
#+END_SRC

Now it can run docker inside docker (inside docker insider docker ...)

#+BEGIN_SRC bash
debian@pine64:~$ docker run -ti --rm -v /usr/bin/docker:/usr/bin/docker -v /usr/bin/docker-containerd:/usr/bin/docker-containerd -v /usr/bin/docker-containerd-ctr:/usr/bin/docker-containerd-ctr -v /usr/bin/docker-containerd-shim:/usr/bin/docker-containerd-shim -v /usr/bin/dockerd:/usr/bin/dockerd -v /usr/bin/docker-proxy:/usr/bin/docker-proxy -v /usr/bin/docker-runc:/usr/bin/docker-runc -v /var/run/docker.sock:/var/run/docker.sock aarch64/debian
root@3ed95b56f74b:/# uname -a
Linux 3ed95b56f74b 3.10.102 #1 SMP PREEMPT Mon Aug 22 07:28:14 UTC 2016 aarch64 GNU/Linux
root@3ed95b56f74b:/#
root@3ed95b56f74b:/# docker run -ti --rm -v /usr/bin/docker:/usr/bin/docker -v /usr/bin/docker-containerd:/usr/bin/docker-containerd -v /usr/bin/docker-containerd-ctr:/usr/bin/docker-containerd-ctr -v /usr/bin/docker-containerd-shim:/usr/bin/docker-containerd-shim -v /usr/bin/dockerd:/usr/bin/dockerd -v /usr/bin/docker-proxy:/usr/bin/docker-proxy -v /usr/bin/docker-runc:/usr/bin/docker-runc -v /var/run/docker.sock:/var/run/docker.sock aarch64/debian
root@f7ef0ed3e6c6:/# uname -a
Linux f7ef0ed3e6c6 3.10.102 #1 SMP PREEMPT Mon Aug 22 07:28:14 UTC 2016 aarch64 GNU/Linux
root@f7ef0ed3e6c6:/#
root@f7ef0ed3e6c6:/# docker run -ti --rm -v /usr/bin/docker:/usr/bin/docker -v /usr/bin/docker-containerd:/usr/bin/docker-containerd -v /usr/bin/docker-containerd-ctr:/usr/bin/docker-containerd-ctr -v /usr/bin/docker-containerd-shim:/usr/bin/docker-containerd-shim -v /usr/bin/dockerd:/usr/bin/dockerd -v /usr/bin/docker-proxy:/usr/bin/docker-proxy -v /usr/bin/docker-runc:/usr/bin/docker-runc -v /var/run/docker.sock:/var/run/docker.sock aarch64/debian
root@f026e8e68fb9:/# uname -a
Linux f026e8e68fb9 3.10.102 #1 SMP PREEMPT Mon Aug 22 07:28:14 UTC 2016 aarch64 GNU/Linux
root@f026e8e68fb9:/#
root@f026e8e68fb9:/# docker run -ti --rm -v /usr/bin/docker:/usr/bin/docker -v /usr/bin/docker-containerd:/usr/bin/docker-containerd -v /usr/bin/docker-containerd-ctr:/usr/bin/docker-containerd-ctr -v /usr/bin/docker-containerd-shim:/usr/bin/docker-containerd-shim -v /usr/bin/dockerd:/usr/bin/dockerd -v /usr/bin/docker-proxy:/usr/bin/docker-proxy -v /usr/bin/docker-runc:/usr/bin/docker-runc -v /var/run/docker.sock:/var/run/docker.sock aarch64/debian
root@e1c62789b81b:/# uname -a
Linux e1c62789b81b 3.10.102 #1 SMP PREEMPT Mon Aug 22 07:28:14 UTC 2016 aarch64 GNU/Linux
root@e1c62789b81b:/#
root@e1c62789b81b:/# exit
exit
root@f026e8e68fb9:/#
root@f026e8e68fb9:/# exit
exit
root@f7ef0ed3e6c6:/#
root@f7ef0ed3e6c6:/# exit
exit
root@3ed95b56f74b:/#
root@3ed95b56f74b:/# exit
exit
debian@pine64:~$
#+END_SRC

This approach would be used to setup a development docker images and run other docker developments inside the development docker

Another one is to run aarch64 docker images (Pine64) on x86_64 hosts (and vice versa). This mothod is based on qemu emulation, e.g. qemu-aarch64-static built for x86_64, and need to register the qemu bin in binfmt_misc kernel module

#+BEGIN_SRC bash
$ echo ':aarch64:M::\x7fELF\x02\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\xb7:\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff:/usr/bin/qemu-aarch64-static:' | sudo tee /proc/sys/fs/binfmt_misc/register

:aarch64:M::\x7fELF\x02\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\xb7:\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff:/usr/bin/qemu-aarch64-static:
#+END_SRC

By now docker images in different architectures (in this case they are x86_64 and aarch64) can be run on x86_host

#+BEGIN_SRC bash
$ uname -a

Linux testing-gce-66a87dc2-6670-46aa-91f7-1ffb200b2d7f 3.19.0-66-generic #74~14.04.1-Ubuntu SMP Tue Jul 19 19:56:11 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux

$ docker run -i --rm x86_64 uname -a

Linux fc3761fb6f70 3.19.0-66-generic #74~14.04.1-Ubuntu SMP Tue Jul 19 19:56:11 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux

$ docker run -i --rm -v /usr/bin/qemu-aarch64-static:/usr/bin/qemu-aarch64-static aarch64/debian uname -a

Linux 78d63a4321dc 3.19.0-66-generic #74~14.04.1-Ubuntu SMP Tue Jul 19 19:56:11 UTC 2016 aarch64 GNU/Linux
#+END_SRC

One drawback of this is that a aarch64 docker image cannot be built on a x86_64 host via qemu emulation. This may not functional properly right now and need more research on this.
